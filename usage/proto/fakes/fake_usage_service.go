// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	usage "github.com/trmnl-core/services/usage/proto"
	"github.com/micro/micro/v3/service/client"
)

type FakeUsageService struct {
	ListStub        func(context.Context, *usage.ListRequest, ...client.CallOption) (*usage.ListResponse, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 *usage.ListRequest
		arg3 []client.CallOption
	}
	listReturns struct {
		result1 *usage.ListResponse
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 *usage.ListResponse
		result2 error
	}
	ReadStub        func(context.Context, *usage.ReadRequest, ...client.CallOption) (*usage.ReadResponse, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		arg1 context.Context
		arg2 *usage.ReadRequest
		arg3 []client.CallOption
	}
	readReturns struct {
		result1 *usage.ReadResponse
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 *usage.ReadResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUsageService) List(arg1 context.Context, arg2 *usage.ListRequest, arg3 ...client.CallOption) (*usage.ListResponse, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 *usage.ListRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2, arg3})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsageService) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeUsageService) ListCalls(stub func(context.Context, *usage.ListRequest, ...client.CallOption) (*usage.ListResponse, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeUsageService) ListArgsForCall(i int) (context.Context, *usage.ListRequest, []client.CallOption) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUsageService) ListReturns(result1 *usage.ListResponse, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *usage.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeUsageService) ListReturnsOnCall(i int, result1 *usage.ListResponse, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 *usage.ListResponse
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 *usage.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeUsageService) Read(arg1 context.Context, arg2 *usage.ReadRequest, arg3 ...client.CallOption) (*usage.ReadResponse, error) {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		arg1 context.Context
		arg2 *usage.ReadRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ReadStub
	fakeReturns := fake.readReturns
	fake.recordInvocation("Read", []interface{}{arg1, arg2, arg3})
	fake.readMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsageService) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeUsageService) ReadCalls(stub func(context.Context, *usage.ReadRequest, ...client.CallOption) (*usage.ReadResponse, error)) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = stub
}

func (fake *FakeUsageService) ReadArgsForCall(i int) (context.Context, *usage.ReadRequest, []client.CallOption) {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	argsForCall := fake.readArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUsageService) ReadReturns(result1 *usage.ReadResponse, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 *usage.ReadResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeUsageService) ReadReturnsOnCall(i int, result1 *usage.ReadResponse, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 *usage.ReadResponse
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 *usage.ReadResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeUsageService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUsageService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usage.UsageService = new(FakeUsageService)
