// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	go_micro_service_invite "github.com/trmnl-core/services/invite/proto"
	"github.com/micro/micro/v3/service/client"
)

type FakeInviteService struct {
	DeleteStub        func(context.Context, *go_micro_service_invite.CreateRequest, ...client.CallOption) (*go_micro_service_invite.CreateResponse, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_service_invite.CreateRequest
		arg3 []client.CallOption
	}
	deleteReturns struct {
		result1 *go_micro_service_invite.CreateResponse
		result2 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 *go_micro_service_invite.CreateResponse
		result2 error
	}
	UserStub        func(context.Context, *go_micro_service_invite.CreateRequest, ...client.CallOption) (*go_micro_service_invite.CreateResponse, error)
	userMutex       sync.RWMutex
	userArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_service_invite.CreateRequest
		arg3 []client.CallOption
	}
	userReturns struct {
		result1 *go_micro_service_invite.CreateResponse
		result2 error
	}
	userReturnsOnCall map[int]struct {
		result1 *go_micro_service_invite.CreateResponse
		result2 error
	}
	ValidateStub        func(context.Context, *go_micro_service_invite.ValidateRequest, ...client.CallOption) (*go_micro_service_invite.ValidateResponse, error)
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_service_invite.ValidateRequest
		arg3 []client.CallOption
	}
	validateReturns struct {
		result1 *go_micro_service_invite.ValidateResponse
		result2 error
	}
	validateReturnsOnCall map[int]struct {
		result1 *go_micro_service_invite.ValidateResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInviteService) Delete(arg1 context.Context, arg2 *go_micro_service_invite.CreateRequest, arg3 ...client.CallOption) (*go_micro_service_invite.CreateResponse, error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_service_invite.CreateRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInviteService) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeInviteService) DeleteCalls(stub func(context.Context, *go_micro_service_invite.CreateRequest, ...client.CallOption) (*go_micro_service_invite.CreateResponse, error)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeInviteService) DeleteArgsForCall(i int) (context.Context, *go_micro_service_invite.CreateRequest, []client.CallOption) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeInviteService) DeleteReturns(result1 *go_micro_service_invite.CreateResponse, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 *go_micro_service_invite.CreateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeInviteService) DeleteReturnsOnCall(i int, result1 *go_micro_service_invite.CreateResponse, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 *go_micro_service_invite.CreateResponse
			result2 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 *go_micro_service_invite.CreateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeInviteService) User(arg1 context.Context, arg2 *go_micro_service_invite.CreateRequest, arg3 ...client.CallOption) (*go_micro_service_invite.CreateResponse, error) {
	fake.userMutex.Lock()
	ret, specificReturn := fake.userReturnsOnCall[len(fake.userArgsForCall)]
	fake.userArgsForCall = append(fake.userArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_service_invite.CreateRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UserStub
	fakeReturns := fake.userReturns
	fake.recordInvocation("User", []interface{}{arg1, arg2, arg3})
	fake.userMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInviteService) UserCallCount() int {
	fake.userMutex.RLock()
	defer fake.userMutex.RUnlock()
	return len(fake.userArgsForCall)
}

func (fake *FakeInviteService) UserCalls(stub func(context.Context, *go_micro_service_invite.CreateRequest, ...client.CallOption) (*go_micro_service_invite.CreateResponse, error)) {
	fake.userMutex.Lock()
	defer fake.userMutex.Unlock()
	fake.UserStub = stub
}

func (fake *FakeInviteService) UserArgsForCall(i int) (context.Context, *go_micro_service_invite.CreateRequest, []client.CallOption) {
	fake.userMutex.RLock()
	defer fake.userMutex.RUnlock()
	argsForCall := fake.userArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeInviteService) UserReturns(result1 *go_micro_service_invite.CreateResponse, result2 error) {
	fake.userMutex.Lock()
	defer fake.userMutex.Unlock()
	fake.UserStub = nil
	fake.userReturns = struct {
		result1 *go_micro_service_invite.CreateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeInviteService) UserReturnsOnCall(i int, result1 *go_micro_service_invite.CreateResponse, result2 error) {
	fake.userMutex.Lock()
	defer fake.userMutex.Unlock()
	fake.UserStub = nil
	if fake.userReturnsOnCall == nil {
		fake.userReturnsOnCall = make(map[int]struct {
			result1 *go_micro_service_invite.CreateResponse
			result2 error
		})
	}
	fake.userReturnsOnCall[i] = struct {
		result1 *go_micro_service_invite.CreateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeInviteService) Validate(arg1 context.Context, arg2 *go_micro_service_invite.ValidateRequest, arg3 ...client.CallOption) (*go_micro_service_invite.ValidateResponse, error) {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_service_invite.ValidateRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1, arg2, arg3})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInviteService) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *FakeInviteService) ValidateCalls(stub func(context.Context, *go_micro_service_invite.ValidateRequest, ...client.CallOption) (*go_micro_service_invite.ValidateResponse, error)) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *FakeInviteService) ValidateArgsForCall(i int) (context.Context, *go_micro_service_invite.ValidateRequest, []client.CallOption) {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeInviteService) ValidateReturns(result1 *go_micro_service_invite.ValidateResponse, result2 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 *go_micro_service_invite.ValidateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeInviteService) ValidateReturnsOnCall(i int, result1 *go_micro_service_invite.ValidateResponse, result2 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 *go_micro_service_invite.ValidateResponse
			result2 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 *go_micro_service_invite.ValidateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeInviteService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.userMutex.RLock()
	defer fake.userMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInviteService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ go_micro_service_invite.InviteService = new(FakeInviteService)
