// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	namespaces "github.com/trmnl-core/services/namespaces/proto"
	"github.com/micro/micro/v3/service/client"
)

type FakeNamespacesService struct {
	AddUserStub        func(context.Context, *namespaces.AddUserRequest, ...client.CallOption) (*namespaces.AddUserResponse, error)
	addUserMutex       sync.RWMutex
	addUserArgsForCall []struct {
		arg1 context.Context
		arg2 *namespaces.AddUserRequest
		arg3 []client.CallOption
	}
	addUserReturns struct {
		result1 *namespaces.AddUserResponse
		result2 error
	}
	addUserReturnsOnCall map[int]struct {
		result1 *namespaces.AddUserResponse
		result2 error
	}
	CreateStub        func(context.Context, *namespaces.CreateRequest, ...client.CallOption) (*namespaces.CreateResponse, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 *namespaces.CreateRequest
		arg3 []client.CallOption
	}
	createReturns struct {
		result1 *namespaces.CreateResponse
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *namespaces.CreateResponse
		result2 error
	}
	DeleteStub        func(context.Context, *namespaces.DeleteRequest, ...client.CallOption) (*namespaces.DeleteResponse, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 *namespaces.DeleteRequest
		arg3 []client.CallOption
	}
	deleteReturns struct {
		result1 *namespaces.DeleteResponse
		result2 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 *namespaces.DeleteResponse
		result2 error
	}
	ListStub        func(context.Context, *namespaces.ListRequest, ...client.CallOption) (*namespaces.ListResponse, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 *namespaces.ListRequest
		arg3 []client.CallOption
	}
	listReturns struct {
		result1 *namespaces.ListResponse
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 *namespaces.ListResponse
		result2 error
	}
	ReadStub        func(context.Context, *namespaces.ReadRequest, ...client.CallOption) (*namespaces.ReadResponse, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		arg1 context.Context
		arg2 *namespaces.ReadRequest
		arg3 []client.CallOption
	}
	readReturns struct {
		result1 *namespaces.ReadResponse
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 *namespaces.ReadResponse
		result2 error
	}
	RemoveUserStub        func(context.Context, *namespaces.RemoveUserRequest, ...client.CallOption) (*namespaces.RemoveUserResponse, error)
	removeUserMutex       sync.RWMutex
	removeUserArgsForCall []struct {
		arg1 context.Context
		arg2 *namespaces.RemoveUserRequest
		arg3 []client.CallOption
	}
	removeUserReturns struct {
		result1 *namespaces.RemoveUserResponse
		result2 error
	}
	removeUserReturnsOnCall map[int]struct {
		result1 *namespaces.RemoveUserResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNamespacesService) AddUser(arg1 context.Context, arg2 *namespaces.AddUserRequest, arg3 ...client.CallOption) (*namespaces.AddUserResponse, error) {
	fake.addUserMutex.Lock()
	ret, specificReturn := fake.addUserReturnsOnCall[len(fake.addUserArgsForCall)]
	fake.addUserArgsForCall = append(fake.addUserArgsForCall, struct {
		arg1 context.Context
		arg2 *namespaces.AddUserRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.AddUserStub
	fakeReturns := fake.addUserReturns
	fake.recordInvocation("AddUser", []interface{}{arg1, arg2, arg3})
	fake.addUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNamespacesService) AddUserCallCount() int {
	fake.addUserMutex.RLock()
	defer fake.addUserMutex.RUnlock()
	return len(fake.addUserArgsForCall)
}

func (fake *FakeNamespacesService) AddUserCalls(stub func(context.Context, *namespaces.AddUserRequest, ...client.CallOption) (*namespaces.AddUserResponse, error)) {
	fake.addUserMutex.Lock()
	defer fake.addUserMutex.Unlock()
	fake.AddUserStub = stub
}

func (fake *FakeNamespacesService) AddUserArgsForCall(i int) (context.Context, *namespaces.AddUserRequest, []client.CallOption) {
	fake.addUserMutex.RLock()
	defer fake.addUserMutex.RUnlock()
	argsForCall := fake.addUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNamespacesService) AddUserReturns(result1 *namespaces.AddUserResponse, result2 error) {
	fake.addUserMutex.Lock()
	defer fake.addUserMutex.Unlock()
	fake.AddUserStub = nil
	fake.addUserReturns = struct {
		result1 *namespaces.AddUserResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) AddUserReturnsOnCall(i int, result1 *namespaces.AddUserResponse, result2 error) {
	fake.addUserMutex.Lock()
	defer fake.addUserMutex.Unlock()
	fake.AddUserStub = nil
	if fake.addUserReturnsOnCall == nil {
		fake.addUserReturnsOnCall = make(map[int]struct {
			result1 *namespaces.AddUserResponse
			result2 error
		})
	}
	fake.addUserReturnsOnCall[i] = struct {
		result1 *namespaces.AddUserResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) Create(arg1 context.Context, arg2 *namespaces.CreateRequest, arg3 ...client.CallOption) (*namespaces.CreateResponse, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 *namespaces.CreateRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNamespacesService) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeNamespacesService) CreateCalls(stub func(context.Context, *namespaces.CreateRequest, ...client.CallOption) (*namespaces.CreateResponse, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeNamespacesService) CreateArgsForCall(i int) (context.Context, *namespaces.CreateRequest, []client.CallOption) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNamespacesService) CreateReturns(result1 *namespaces.CreateResponse, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *namespaces.CreateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) CreateReturnsOnCall(i int, result1 *namespaces.CreateResponse, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *namespaces.CreateResponse
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *namespaces.CreateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) Delete(arg1 context.Context, arg2 *namespaces.DeleteRequest, arg3 ...client.CallOption) (*namespaces.DeleteResponse, error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 *namespaces.DeleteRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNamespacesService) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeNamespacesService) DeleteCalls(stub func(context.Context, *namespaces.DeleteRequest, ...client.CallOption) (*namespaces.DeleteResponse, error)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeNamespacesService) DeleteArgsForCall(i int) (context.Context, *namespaces.DeleteRequest, []client.CallOption) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNamespacesService) DeleteReturns(result1 *namespaces.DeleteResponse, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 *namespaces.DeleteResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) DeleteReturnsOnCall(i int, result1 *namespaces.DeleteResponse, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 *namespaces.DeleteResponse
			result2 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 *namespaces.DeleteResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) List(arg1 context.Context, arg2 *namespaces.ListRequest, arg3 ...client.CallOption) (*namespaces.ListResponse, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 *namespaces.ListRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2, arg3})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNamespacesService) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeNamespacesService) ListCalls(stub func(context.Context, *namespaces.ListRequest, ...client.CallOption) (*namespaces.ListResponse, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeNamespacesService) ListArgsForCall(i int) (context.Context, *namespaces.ListRequest, []client.CallOption) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNamespacesService) ListReturns(result1 *namespaces.ListResponse, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *namespaces.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) ListReturnsOnCall(i int, result1 *namespaces.ListResponse, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 *namespaces.ListResponse
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 *namespaces.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) Read(arg1 context.Context, arg2 *namespaces.ReadRequest, arg3 ...client.CallOption) (*namespaces.ReadResponse, error) {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		arg1 context.Context
		arg2 *namespaces.ReadRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ReadStub
	fakeReturns := fake.readReturns
	fake.recordInvocation("Read", []interface{}{arg1, arg2, arg3})
	fake.readMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNamespacesService) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeNamespacesService) ReadCalls(stub func(context.Context, *namespaces.ReadRequest, ...client.CallOption) (*namespaces.ReadResponse, error)) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = stub
}

func (fake *FakeNamespacesService) ReadArgsForCall(i int) (context.Context, *namespaces.ReadRequest, []client.CallOption) {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	argsForCall := fake.readArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNamespacesService) ReadReturns(result1 *namespaces.ReadResponse, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 *namespaces.ReadResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) ReadReturnsOnCall(i int, result1 *namespaces.ReadResponse, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 *namespaces.ReadResponse
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 *namespaces.ReadResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) RemoveUser(arg1 context.Context, arg2 *namespaces.RemoveUserRequest, arg3 ...client.CallOption) (*namespaces.RemoveUserResponse, error) {
	fake.removeUserMutex.Lock()
	ret, specificReturn := fake.removeUserReturnsOnCall[len(fake.removeUserArgsForCall)]
	fake.removeUserArgsForCall = append(fake.removeUserArgsForCall, struct {
		arg1 context.Context
		arg2 *namespaces.RemoveUserRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.RemoveUserStub
	fakeReturns := fake.removeUserReturns
	fake.recordInvocation("RemoveUser", []interface{}{arg1, arg2, arg3})
	fake.removeUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNamespacesService) RemoveUserCallCount() int {
	fake.removeUserMutex.RLock()
	defer fake.removeUserMutex.RUnlock()
	return len(fake.removeUserArgsForCall)
}

func (fake *FakeNamespacesService) RemoveUserCalls(stub func(context.Context, *namespaces.RemoveUserRequest, ...client.CallOption) (*namespaces.RemoveUserResponse, error)) {
	fake.removeUserMutex.Lock()
	defer fake.removeUserMutex.Unlock()
	fake.RemoveUserStub = stub
}

func (fake *FakeNamespacesService) RemoveUserArgsForCall(i int) (context.Context, *namespaces.RemoveUserRequest, []client.CallOption) {
	fake.removeUserMutex.RLock()
	defer fake.removeUserMutex.RUnlock()
	argsForCall := fake.removeUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNamespacesService) RemoveUserReturns(result1 *namespaces.RemoveUserResponse, result2 error) {
	fake.removeUserMutex.Lock()
	defer fake.removeUserMutex.Unlock()
	fake.RemoveUserStub = nil
	fake.removeUserReturns = struct {
		result1 *namespaces.RemoveUserResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) RemoveUserReturnsOnCall(i int, result1 *namespaces.RemoveUserResponse, result2 error) {
	fake.removeUserMutex.Lock()
	defer fake.removeUserMutex.Unlock()
	fake.RemoveUserStub = nil
	if fake.removeUserReturnsOnCall == nil {
		fake.removeUserReturnsOnCall = make(map[int]struct {
			result1 *namespaces.RemoveUserResponse
			result2 error
		})
	}
	fake.removeUserReturnsOnCall[i] = struct {
		result1 *namespaces.RemoveUserResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNamespacesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addUserMutex.RLock()
	defer fake.addUserMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	fake.removeUserMutex.RLock()
	defer fake.removeUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNamespacesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ namespaces.NamespacesService = new(FakeNamespacesService)
