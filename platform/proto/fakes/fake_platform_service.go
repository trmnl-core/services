// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	platform "github.com/trmnl-core/services/platform/proto"
	"github.com/micro/micro/v3/service/client"
)

type FakePlatformService struct {
	CreateNamespaceStub        func(context.Context, *platform.CreateNamespaceRequest, ...client.CallOption) (*platform.CreateNamespaceResponse, error)
	createNamespaceMutex       sync.RWMutex
	createNamespaceArgsForCall []struct {
		arg1 context.Context
		arg2 *platform.CreateNamespaceRequest
		arg3 []client.CallOption
	}
	createNamespaceReturns struct {
		result1 *platform.CreateNamespaceResponse
		result2 error
	}
	createNamespaceReturnsOnCall map[int]struct {
		result1 *platform.CreateNamespaceResponse
		result2 error
	}
	DeleteNamespaceStub        func(context.Context, *platform.DeleteNamespaceRequest, ...client.CallOption) (*platform.DeleteNamespaceResponse, error)
	deleteNamespaceMutex       sync.RWMutex
	deleteNamespaceArgsForCall []struct {
		arg1 context.Context
		arg2 *platform.DeleteNamespaceRequest
		arg3 []client.CallOption
	}
	deleteNamespaceReturns struct {
		result1 *platform.DeleteNamespaceResponse
		result2 error
	}
	deleteNamespaceReturnsOnCall map[int]struct {
		result1 *platform.DeleteNamespaceResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePlatformService) CreateNamespace(arg1 context.Context, arg2 *platform.CreateNamespaceRequest, arg3 ...client.CallOption) (*platform.CreateNamespaceResponse, error) {
	fake.createNamespaceMutex.Lock()
	ret, specificReturn := fake.createNamespaceReturnsOnCall[len(fake.createNamespaceArgsForCall)]
	fake.createNamespaceArgsForCall = append(fake.createNamespaceArgsForCall, struct {
		arg1 context.Context
		arg2 *platform.CreateNamespaceRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreateNamespaceStub
	fakeReturns := fake.createNamespaceReturns
	fake.recordInvocation("CreateNamespace", []interface{}{arg1, arg2, arg3})
	fake.createNamespaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePlatformService) CreateNamespaceCallCount() int {
	fake.createNamespaceMutex.RLock()
	defer fake.createNamespaceMutex.RUnlock()
	return len(fake.createNamespaceArgsForCall)
}

func (fake *FakePlatformService) CreateNamespaceCalls(stub func(context.Context, *platform.CreateNamespaceRequest, ...client.CallOption) (*platform.CreateNamespaceResponse, error)) {
	fake.createNamespaceMutex.Lock()
	defer fake.createNamespaceMutex.Unlock()
	fake.CreateNamespaceStub = stub
}

func (fake *FakePlatformService) CreateNamespaceArgsForCall(i int) (context.Context, *platform.CreateNamespaceRequest, []client.CallOption) {
	fake.createNamespaceMutex.RLock()
	defer fake.createNamespaceMutex.RUnlock()
	argsForCall := fake.createNamespaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePlatformService) CreateNamespaceReturns(result1 *platform.CreateNamespaceResponse, result2 error) {
	fake.createNamespaceMutex.Lock()
	defer fake.createNamespaceMutex.Unlock()
	fake.CreateNamespaceStub = nil
	fake.createNamespaceReturns = struct {
		result1 *platform.CreateNamespaceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakePlatformService) CreateNamespaceReturnsOnCall(i int, result1 *platform.CreateNamespaceResponse, result2 error) {
	fake.createNamespaceMutex.Lock()
	defer fake.createNamespaceMutex.Unlock()
	fake.CreateNamespaceStub = nil
	if fake.createNamespaceReturnsOnCall == nil {
		fake.createNamespaceReturnsOnCall = make(map[int]struct {
			result1 *platform.CreateNamespaceResponse
			result2 error
		})
	}
	fake.createNamespaceReturnsOnCall[i] = struct {
		result1 *platform.CreateNamespaceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakePlatformService) DeleteNamespace(arg1 context.Context, arg2 *platform.DeleteNamespaceRequest, arg3 ...client.CallOption) (*platform.DeleteNamespaceResponse, error) {
	fake.deleteNamespaceMutex.Lock()
	ret, specificReturn := fake.deleteNamespaceReturnsOnCall[len(fake.deleteNamespaceArgsForCall)]
	fake.deleteNamespaceArgsForCall = append(fake.deleteNamespaceArgsForCall, struct {
		arg1 context.Context
		arg2 *platform.DeleteNamespaceRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.DeleteNamespaceStub
	fakeReturns := fake.deleteNamespaceReturns
	fake.recordInvocation("DeleteNamespace", []interface{}{arg1, arg2, arg3})
	fake.deleteNamespaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePlatformService) DeleteNamespaceCallCount() int {
	fake.deleteNamespaceMutex.RLock()
	defer fake.deleteNamespaceMutex.RUnlock()
	return len(fake.deleteNamespaceArgsForCall)
}

func (fake *FakePlatformService) DeleteNamespaceCalls(stub func(context.Context, *platform.DeleteNamespaceRequest, ...client.CallOption) (*platform.DeleteNamespaceResponse, error)) {
	fake.deleteNamespaceMutex.Lock()
	defer fake.deleteNamespaceMutex.Unlock()
	fake.DeleteNamespaceStub = stub
}

func (fake *FakePlatformService) DeleteNamespaceArgsForCall(i int) (context.Context, *platform.DeleteNamespaceRequest, []client.CallOption) {
	fake.deleteNamespaceMutex.RLock()
	defer fake.deleteNamespaceMutex.RUnlock()
	argsForCall := fake.deleteNamespaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePlatformService) DeleteNamespaceReturns(result1 *platform.DeleteNamespaceResponse, result2 error) {
	fake.deleteNamespaceMutex.Lock()
	defer fake.deleteNamespaceMutex.Unlock()
	fake.DeleteNamespaceStub = nil
	fake.deleteNamespaceReturns = struct {
		result1 *platform.DeleteNamespaceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakePlatformService) DeleteNamespaceReturnsOnCall(i int, result1 *platform.DeleteNamespaceResponse, result2 error) {
	fake.deleteNamespaceMutex.Lock()
	defer fake.deleteNamespaceMutex.Unlock()
	fake.DeleteNamespaceStub = nil
	if fake.deleteNamespaceReturnsOnCall == nil {
		fake.deleteNamespaceReturnsOnCall = make(map[int]struct {
			result1 *platform.DeleteNamespaceResponse
			result2 error
		})
	}
	fake.deleteNamespaceReturnsOnCall[i] = struct {
		result1 *platform.DeleteNamespaceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakePlatformService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createNamespaceMutex.RLock()
	defer fake.createNamespaceMutex.RUnlock()
	fake.deleteNamespaceMutex.RLock()
	defer fake.deleteNamespaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePlatformService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ platform.PlatformService = new(FakePlatformService)
