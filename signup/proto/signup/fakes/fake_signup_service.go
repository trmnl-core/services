// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	go_micro_service_signup "github.com/trmnl-core/services/signup/proto/signup"
	"github.com/micro/micro/v3/service/client"
)

type FakeSignupService struct {
	CompleteSignupStub        func(context.Context, *go_micro_service_signup.CompleteSignupRequest, ...client.CallOption) (*go_micro_service_signup.CompleteSignupResponse, error)
	completeSignupMutex       sync.RWMutex
	completeSignupArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.CompleteSignupRequest
		arg3 []client.CallOption
	}
	completeSignupReturns struct {
		result1 *go_micro_service_signup.CompleteSignupResponse
		result2 error
	}
	completeSignupReturnsOnCall map[int]struct {
		result1 *go_micro_service_signup.CompleteSignupResponse
		result2 error
	}
	HasPaymentMethodStub        func(context.Context, *go_micro_service_signup.HasPaymentMethodRequest, ...client.CallOption) (*go_micro_service_signup.HasPaymentMethodResponse, error)
	hasPaymentMethodMutex       sync.RWMutex
	hasPaymentMethodArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.HasPaymentMethodRequest
		arg3 []client.CallOption
	}
	hasPaymentMethodReturns struct {
		result1 *go_micro_service_signup.HasPaymentMethodResponse
		result2 error
	}
	hasPaymentMethodReturnsOnCall map[int]struct {
		result1 *go_micro_service_signup.HasPaymentMethodResponse
		result2 error
	}
	RecoverStub        func(context.Context, *go_micro_service_signup.RecoverRequest, ...client.CallOption) (*go_micro_service_signup.RecoverResponse, error)
	recoverMutex       sync.RWMutex
	recoverArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.RecoverRequest
		arg3 []client.CallOption
	}
	recoverReturns struct {
		result1 *go_micro_service_signup.RecoverResponse
		result2 error
	}
	recoverReturnsOnCall map[int]struct {
		result1 *go_micro_service_signup.RecoverResponse
		result2 error
	}
	SendVerificationEmailStub        func(context.Context, *go_micro_service_signup.SendVerificationEmailRequest, ...client.CallOption) (*go_micro_service_signup.SendVerificationEmailResponse, error)
	sendVerificationEmailMutex       sync.RWMutex
	sendVerificationEmailArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.SendVerificationEmailRequest
		arg3 []client.CallOption
	}
	sendVerificationEmailReturns struct {
		result1 *go_micro_service_signup.SendVerificationEmailResponse
		result2 error
	}
	sendVerificationEmailReturnsOnCall map[int]struct {
		result1 *go_micro_service_signup.SendVerificationEmailResponse
		result2 error
	}
	SetPaymentMethodStub        func(context.Context, *go_micro_service_signup.SetPaymentMethodRequest, ...client.CallOption) (*go_micro_service_signup.SetPaymentMethodResponse, error)
	setPaymentMethodMutex       sync.RWMutex
	setPaymentMethodArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.SetPaymentMethodRequest
		arg3 []client.CallOption
	}
	setPaymentMethodReturns struct {
		result1 *go_micro_service_signup.SetPaymentMethodResponse
		result2 error
	}
	setPaymentMethodReturnsOnCall map[int]struct {
		result1 *go_micro_service_signup.SetPaymentMethodResponse
		result2 error
	}
	VerifyStub        func(context.Context, *go_micro_service_signup.VerifyRequest, ...client.CallOption) (*go_micro_service_signup.VerifyResponse, error)
	verifyMutex       sync.RWMutex
	verifyArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.VerifyRequest
		arg3 []client.CallOption
	}
	verifyReturns struct {
		result1 *go_micro_service_signup.VerifyResponse
		result2 error
	}
	verifyReturnsOnCall map[int]struct {
		result1 *go_micro_service_signup.VerifyResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSignupService) CompleteSignup(arg1 context.Context, arg2 *go_micro_service_signup.CompleteSignupRequest, arg3 ...client.CallOption) (*go_micro_service_signup.CompleteSignupResponse, error) {
	fake.completeSignupMutex.Lock()
	ret, specificReturn := fake.completeSignupReturnsOnCall[len(fake.completeSignupArgsForCall)]
	fake.completeSignupArgsForCall = append(fake.completeSignupArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.CompleteSignupRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CompleteSignupStub
	fakeReturns := fake.completeSignupReturns
	fake.recordInvocation("CompleteSignup", []interface{}{arg1, arg2, arg3})
	fake.completeSignupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSignupService) CompleteSignupCallCount() int {
	fake.completeSignupMutex.RLock()
	defer fake.completeSignupMutex.RUnlock()
	return len(fake.completeSignupArgsForCall)
}

func (fake *FakeSignupService) CompleteSignupCalls(stub func(context.Context, *go_micro_service_signup.CompleteSignupRequest, ...client.CallOption) (*go_micro_service_signup.CompleteSignupResponse, error)) {
	fake.completeSignupMutex.Lock()
	defer fake.completeSignupMutex.Unlock()
	fake.CompleteSignupStub = stub
}

func (fake *FakeSignupService) CompleteSignupArgsForCall(i int) (context.Context, *go_micro_service_signup.CompleteSignupRequest, []client.CallOption) {
	fake.completeSignupMutex.RLock()
	defer fake.completeSignupMutex.RUnlock()
	argsForCall := fake.completeSignupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSignupService) CompleteSignupReturns(result1 *go_micro_service_signup.CompleteSignupResponse, result2 error) {
	fake.completeSignupMutex.Lock()
	defer fake.completeSignupMutex.Unlock()
	fake.CompleteSignupStub = nil
	fake.completeSignupReturns = struct {
		result1 *go_micro_service_signup.CompleteSignupResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) CompleteSignupReturnsOnCall(i int, result1 *go_micro_service_signup.CompleteSignupResponse, result2 error) {
	fake.completeSignupMutex.Lock()
	defer fake.completeSignupMutex.Unlock()
	fake.CompleteSignupStub = nil
	if fake.completeSignupReturnsOnCall == nil {
		fake.completeSignupReturnsOnCall = make(map[int]struct {
			result1 *go_micro_service_signup.CompleteSignupResponse
			result2 error
		})
	}
	fake.completeSignupReturnsOnCall[i] = struct {
		result1 *go_micro_service_signup.CompleteSignupResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) HasPaymentMethod(arg1 context.Context, arg2 *go_micro_service_signup.HasPaymentMethodRequest, arg3 ...client.CallOption) (*go_micro_service_signup.HasPaymentMethodResponse, error) {
	fake.hasPaymentMethodMutex.Lock()
	ret, specificReturn := fake.hasPaymentMethodReturnsOnCall[len(fake.hasPaymentMethodArgsForCall)]
	fake.hasPaymentMethodArgsForCall = append(fake.hasPaymentMethodArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.HasPaymentMethodRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.HasPaymentMethodStub
	fakeReturns := fake.hasPaymentMethodReturns
	fake.recordInvocation("HasPaymentMethod", []interface{}{arg1, arg2, arg3})
	fake.hasPaymentMethodMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSignupService) HasPaymentMethodCallCount() int {
	fake.hasPaymentMethodMutex.RLock()
	defer fake.hasPaymentMethodMutex.RUnlock()
	return len(fake.hasPaymentMethodArgsForCall)
}

func (fake *FakeSignupService) HasPaymentMethodCalls(stub func(context.Context, *go_micro_service_signup.HasPaymentMethodRequest, ...client.CallOption) (*go_micro_service_signup.HasPaymentMethodResponse, error)) {
	fake.hasPaymentMethodMutex.Lock()
	defer fake.hasPaymentMethodMutex.Unlock()
	fake.HasPaymentMethodStub = stub
}

func (fake *FakeSignupService) HasPaymentMethodArgsForCall(i int) (context.Context, *go_micro_service_signup.HasPaymentMethodRequest, []client.CallOption) {
	fake.hasPaymentMethodMutex.RLock()
	defer fake.hasPaymentMethodMutex.RUnlock()
	argsForCall := fake.hasPaymentMethodArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSignupService) HasPaymentMethodReturns(result1 *go_micro_service_signup.HasPaymentMethodResponse, result2 error) {
	fake.hasPaymentMethodMutex.Lock()
	defer fake.hasPaymentMethodMutex.Unlock()
	fake.HasPaymentMethodStub = nil
	fake.hasPaymentMethodReturns = struct {
		result1 *go_micro_service_signup.HasPaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) HasPaymentMethodReturnsOnCall(i int, result1 *go_micro_service_signup.HasPaymentMethodResponse, result2 error) {
	fake.hasPaymentMethodMutex.Lock()
	defer fake.hasPaymentMethodMutex.Unlock()
	fake.HasPaymentMethodStub = nil
	if fake.hasPaymentMethodReturnsOnCall == nil {
		fake.hasPaymentMethodReturnsOnCall = make(map[int]struct {
			result1 *go_micro_service_signup.HasPaymentMethodResponse
			result2 error
		})
	}
	fake.hasPaymentMethodReturnsOnCall[i] = struct {
		result1 *go_micro_service_signup.HasPaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) Recover(arg1 context.Context, arg2 *go_micro_service_signup.RecoverRequest, arg3 ...client.CallOption) (*go_micro_service_signup.RecoverResponse, error) {
	fake.recoverMutex.Lock()
	ret, specificReturn := fake.recoverReturnsOnCall[len(fake.recoverArgsForCall)]
	fake.recoverArgsForCall = append(fake.recoverArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.RecoverRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.RecoverStub
	fakeReturns := fake.recoverReturns
	fake.recordInvocation("Recover", []interface{}{arg1, arg2, arg3})
	fake.recoverMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSignupService) RecoverCallCount() int {
	fake.recoverMutex.RLock()
	defer fake.recoverMutex.RUnlock()
	return len(fake.recoverArgsForCall)
}

func (fake *FakeSignupService) RecoverCalls(stub func(context.Context, *go_micro_service_signup.RecoverRequest, ...client.CallOption) (*go_micro_service_signup.RecoverResponse, error)) {
	fake.recoverMutex.Lock()
	defer fake.recoverMutex.Unlock()
	fake.RecoverStub = stub
}

func (fake *FakeSignupService) RecoverArgsForCall(i int) (context.Context, *go_micro_service_signup.RecoverRequest, []client.CallOption) {
	fake.recoverMutex.RLock()
	defer fake.recoverMutex.RUnlock()
	argsForCall := fake.recoverArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSignupService) RecoverReturns(result1 *go_micro_service_signup.RecoverResponse, result2 error) {
	fake.recoverMutex.Lock()
	defer fake.recoverMutex.Unlock()
	fake.RecoverStub = nil
	fake.recoverReturns = struct {
		result1 *go_micro_service_signup.RecoverResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) RecoverReturnsOnCall(i int, result1 *go_micro_service_signup.RecoverResponse, result2 error) {
	fake.recoverMutex.Lock()
	defer fake.recoverMutex.Unlock()
	fake.RecoverStub = nil
	if fake.recoverReturnsOnCall == nil {
		fake.recoverReturnsOnCall = make(map[int]struct {
			result1 *go_micro_service_signup.RecoverResponse
			result2 error
		})
	}
	fake.recoverReturnsOnCall[i] = struct {
		result1 *go_micro_service_signup.RecoverResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) SendVerificationEmail(arg1 context.Context, arg2 *go_micro_service_signup.SendVerificationEmailRequest, arg3 ...client.CallOption) (*go_micro_service_signup.SendVerificationEmailResponse, error) {
	fake.sendVerificationEmailMutex.Lock()
	ret, specificReturn := fake.sendVerificationEmailReturnsOnCall[len(fake.sendVerificationEmailArgsForCall)]
	fake.sendVerificationEmailArgsForCall = append(fake.sendVerificationEmailArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.SendVerificationEmailRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.SendVerificationEmailStub
	fakeReturns := fake.sendVerificationEmailReturns
	fake.recordInvocation("SendVerificationEmail", []interface{}{arg1, arg2, arg3})
	fake.sendVerificationEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSignupService) SendVerificationEmailCallCount() int {
	fake.sendVerificationEmailMutex.RLock()
	defer fake.sendVerificationEmailMutex.RUnlock()
	return len(fake.sendVerificationEmailArgsForCall)
}

func (fake *FakeSignupService) SendVerificationEmailCalls(stub func(context.Context, *go_micro_service_signup.SendVerificationEmailRequest, ...client.CallOption) (*go_micro_service_signup.SendVerificationEmailResponse, error)) {
	fake.sendVerificationEmailMutex.Lock()
	defer fake.sendVerificationEmailMutex.Unlock()
	fake.SendVerificationEmailStub = stub
}

func (fake *FakeSignupService) SendVerificationEmailArgsForCall(i int) (context.Context, *go_micro_service_signup.SendVerificationEmailRequest, []client.CallOption) {
	fake.sendVerificationEmailMutex.RLock()
	defer fake.sendVerificationEmailMutex.RUnlock()
	argsForCall := fake.sendVerificationEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSignupService) SendVerificationEmailReturns(result1 *go_micro_service_signup.SendVerificationEmailResponse, result2 error) {
	fake.sendVerificationEmailMutex.Lock()
	defer fake.sendVerificationEmailMutex.Unlock()
	fake.SendVerificationEmailStub = nil
	fake.sendVerificationEmailReturns = struct {
		result1 *go_micro_service_signup.SendVerificationEmailResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) SendVerificationEmailReturnsOnCall(i int, result1 *go_micro_service_signup.SendVerificationEmailResponse, result2 error) {
	fake.sendVerificationEmailMutex.Lock()
	defer fake.sendVerificationEmailMutex.Unlock()
	fake.SendVerificationEmailStub = nil
	if fake.sendVerificationEmailReturnsOnCall == nil {
		fake.sendVerificationEmailReturnsOnCall = make(map[int]struct {
			result1 *go_micro_service_signup.SendVerificationEmailResponse
			result2 error
		})
	}
	fake.sendVerificationEmailReturnsOnCall[i] = struct {
		result1 *go_micro_service_signup.SendVerificationEmailResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) SetPaymentMethod(arg1 context.Context, arg2 *go_micro_service_signup.SetPaymentMethodRequest, arg3 ...client.CallOption) (*go_micro_service_signup.SetPaymentMethodResponse, error) {
	fake.setPaymentMethodMutex.Lock()
	ret, specificReturn := fake.setPaymentMethodReturnsOnCall[len(fake.setPaymentMethodArgsForCall)]
	fake.setPaymentMethodArgsForCall = append(fake.setPaymentMethodArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.SetPaymentMethodRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.SetPaymentMethodStub
	fakeReturns := fake.setPaymentMethodReturns
	fake.recordInvocation("SetPaymentMethod", []interface{}{arg1, arg2, arg3})
	fake.setPaymentMethodMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSignupService) SetPaymentMethodCallCount() int {
	fake.setPaymentMethodMutex.RLock()
	defer fake.setPaymentMethodMutex.RUnlock()
	return len(fake.setPaymentMethodArgsForCall)
}

func (fake *FakeSignupService) SetPaymentMethodCalls(stub func(context.Context, *go_micro_service_signup.SetPaymentMethodRequest, ...client.CallOption) (*go_micro_service_signup.SetPaymentMethodResponse, error)) {
	fake.setPaymentMethodMutex.Lock()
	defer fake.setPaymentMethodMutex.Unlock()
	fake.SetPaymentMethodStub = stub
}

func (fake *FakeSignupService) SetPaymentMethodArgsForCall(i int) (context.Context, *go_micro_service_signup.SetPaymentMethodRequest, []client.CallOption) {
	fake.setPaymentMethodMutex.RLock()
	defer fake.setPaymentMethodMutex.RUnlock()
	argsForCall := fake.setPaymentMethodArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSignupService) SetPaymentMethodReturns(result1 *go_micro_service_signup.SetPaymentMethodResponse, result2 error) {
	fake.setPaymentMethodMutex.Lock()
	defer fake.setPaymentMethodMutex.Unlock()
	fake.SetPaymentMethodStub = nil
	fake.setPaymentMethodReturns = struct {
		result1 *go_micro_service_signup.SetPaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) SetPaymentMethodReturnsOnCall(i int, result1 *go_micro_service_signup.SetPaymentMethodResponse, result2 error) {
	fake.setPaymentMethodMutex.Lock()
	defer fake.setPaymentMethodMutex.Unlock()
	fake.SetPaymentMethodStub = nil
	if fake.setPaymentMethodReturnsOnCall == nil {
		fake.setPaymentMethodReturnsOnCall = make(map[int]struct {
			result1 *go_micro_service_signup.SetPaymentMethodResponse
			result2 error
		})
	}
	fake.setPaymentMethodReturnsOnCall[i] = struct {
		result1 *go_micro_service_signup.SetPaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) Verify(arg1 context.Context, arg2 *go_micro_service_signup.VerifyRequest, arg3 ...client.CallOption) (*go_micro_service_signup.VerifyResponse, error) {
	fake.verifyMutex.Lock()
	ret, specificReturn := fake.verifyReturnsOnCall[len(fake.verifyArgsForCall)]
	fake.verifyArgsForCall = append(fake.verifyArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_service_signup.VerifyRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.VerifyStub
	fakeReturns := fake.verifyReturns
	fake.recordInvocation("Verify", []interface{}{arg1, arg2, arg3})
	fake.verifyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSignupService) VerifyCallCount() int {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return len(fake.verifyArgsForCall)
}

func (fake *FakeSignupService) VerifyCalls(stub func(context.Context, *go_micro_service_signup.VerifyRequest, ...client.CallOption) (*go_micro_service_signup.VerifyResponse, error)) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = stub
}

func (fake *FakeSignupService) VerifyArgsForCall(i int) (context.Context, *go_micro_service_signup.VerifyRequest, []client.CallOption) {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	argsForCall := fake.verifyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSignupService) VerifyReturns(result1 *go_micro_service_signup.VerifyResponse, result2 error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = nil
	fake.verifyReturns = struct {
		result1 *go_micro_service_signup.VerifyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) VerifyReturnsOnCall(i int, result1 *go_micro_service_signup.VerifyResponse, result2 error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = nil
	if fake.verifyReturnsOnCall == nil {
		fake.verifyReturnsOnCall = make(map[int]struct {
			result1 *go_micro_service_signup.VerifyResponse
			result2 error
		})
	}
	fake.verifyReturnsOnCall[i] = struct {
		result1 *go_micro_service_signup.VerifyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSignupService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.completeSignupMutex.RLock()
	defer fake.completeSignupMutex.RUnlock()
	fake.hasPaymentMethodMutex.RLock()
	defer fake.hasPaymentMethodMutex.RUnlock()
	fake.recoverMutex.RLock()
	defer fake.recoverMutex.RUnlock()
	fake.sendVerificationEmailMutex.RLock()
	defer fake.sendVerificationEmailMutex.RUnlock()
	fake.setPaymentMethodMutex.RLock()
	defer fake.setPaymentMethodMutex.RUnlock()
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSignupService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ go_micro_service_signup.SignupService = new(FakeSignupService)
