// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	go_micro_srv_provider "github.com/trmnl-core/services/payments/proto"
	"github.com/micro/micro/v3/service/client"
)

type FakeProviderService struct {
	CancelSubscriptionStub        func(context.Context, *go_micro_srv_provider.CancelSubscriptionRequest, ...client.CallOption) (*go_micro_srv_provider.CancelSubscriptionResponse, error)
	cancelSubscriptionMutex       sync.RWMutex
	cancelSubscriptionArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CancelSubscriptionRequest
		arg3 []client.CallOption
	}
	cancelSubscriptionReturns struct {
		result1 *go_micro_srv_provider.CancelSubscriptionResponse
		result2 error
	}
	cancelSubscriptionReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.CancelSubscriptionResponse
		result2 error
	}
	CreateCustomerStub        func(context.Context, *go_micro_srv_provider.CreateCustomerRequest, ...client.CallOption) (*go_micro_srv_provider.CreateCustomerResponse, error)
	createCustomerMutex       sync.RWMutex
	createCustomerArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CreateCustomerRequest
		arg3 []client.CallOption
	}
	createCustomerReturns struct {
		result1 *go_micro_srv_provider.CreateCustomerResponse
		result2 error
	}
	createCustomerReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.CreateCustomerResponse
		result2 error
	}
	CreatePaymentMethodStub        func(context.Context, *go_micro_srv_provider.CreatePaymentMethodRequest, ...client.CallOption) (*go_micro_srv_provider.CreatePaymentMethodResponse, error)
	createPaymentMethodMutex       sync.RWMutex
	createPaymentMethodArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CreatePaymentMethodRequest
		arg3 []client.CallOption
	}
	createPaymentMethodReturns struct {
		result1 *go_micro_srv_provider.CreatePaymentMethodResponse
		result2 error
	}
	createPaymentMethodReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.CreatePaymentMethodResponse
		result2 error
	}
	CreatePlanStub        func(context.Context, *go_micro_srv_provider.CreatePlanRequest, ...client.CallOption) (*go_micro_srv_provider.CreatePlanResponse, error)
	createPlanMutex       sync.RWMutex
	createPlanArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CreatePlanRequest
		arg3 []client.CallOption
	}
	createPlanReturns struct {
		result1 *go_micro_srv_provider.CreatePlanResponse
		result2 error
	}
	createPlanReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.CreatePlanResponse
		result2 error
	}
	CreateProductStub        func(context.Context, *go_micro_srv_provider.CreateProductRequest, ...client.CallOption) (*go_micro_srv_provider.CreateProductResponse, error)
	createProductMutex       sync.RWMutex
	createProductArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CreateProductRequest
		arg3 []client.CallOption
	}
	createProductReturns struct {
		result1 *go_micro_srv_provider.CreateProductResponse
		result2 error
	}
	createProductReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.CreateProductResponse
		result2 error
	}
	CreateSubscriptionStub        func(context.Context, *go_micro_srv_provider.CreateSubscriptionRequest, ...client.CallOption) (*go_micro_srv_provider.CreateSubscriptionResponse, error)
	createSubscriptionMutex       sync.RWMutex
	createSubscriptionArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CreateSubscriptionRequest
		arg3 []client.CallOption
	}
	createSubscriptionReturns struct {
		result1 *go_micro_srv_provider.CreateSubscriptionResponse
		result2 error
	}
	createSubscriptionReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.CreateSubscriptionResponse
		result2 error
	}
	DeleteCustomerStub        func(context.Context, *go_micro_srv_provider.DeleteCustomerRequest, ...client.CallOption) (*go_micro_srv_provider.DeleteCustomerResponse, error)
	deleteCustomerMutex       sync.RWMutex
	deleteCustomerArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.DeleteCustomerRequest
		arg3 []client.CallOption
	}
	deleteCustomerReturns struct {
		result1 *go_micro_srv_provider.DeleteCustomerResponse
		result2 error
	}
	deleteCustomerReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.DeleteCustomerResponse
		result2 error
	}
	DeletePaymentMethodStub        func(context.Context, *go_micro_srv_provider.DeletePaymentMethodRequest, ...client.CallOption) (*go_micro_srv_provider.DeletePaymentMethodResponse, error)
	deletePaymentMethodMutex       sync.RWMutex
	deletePaymentMethodArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.DeletePaymentMethodRequest
		arg3 []client.CallOption
	}
	deletePaymentMethodReturns struct {
		result1 *go_micro_srv_provider.DeletePaymentMethodResponse
		result2 error
	}
	deletePaymentMethodReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.DeletePaymentMethodResponse
		result2 error
	}
	GetProviderIDStub        func(context.Context, *go_micro_srv_provider.GetProviderIDRequest, ...client.CallOption) (*go_micro_srv_provider.GetProviderIDResponse, error)
	getProviderIDMutex       sync.RWMutex
	getProviderIDArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.GetProviderIDRequest
		arg3 []client.CallOption
	}
	getProviderIDReturns struct {
		result1 *go_micro_srv_provider.GetProviderIDResponse
		result2 error
	}
	getProviderIDReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.GetProviderIDResponse
		result2 error
	}
	ListPaymentMethodsStub        func(context.Context, *go_micro_srv_provider.ListPaymentMethodsRequest, ...client.CallOption) (*go_micro_srv_provider.ListPaymentMethodsResponse, error)
	listPaymentMethodsMutex       sync.RWMutex
	listPaymentMethodsArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.ListPaymentMethodsRequest
		arg3 []client.CallOption
	}
	listPaymentMethodsReturns struct {
		result1 *go_micro_srv_provider.ListPaymentMethodsResponse
		result2 error
	}
	listPaymentMethodsReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.ListPaymentMethodsResponse
		result2 error
	}
	ListPlansStub        func(context.Context, *go_micro_srv_provider.ListPlansRequest, ...client.CallOption) (*go_micro_srv_provider.ListPlansResponse, error)
	listPlansMutex       sync.RWMutex
	listPlansArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.ListPlansRequest
		arg3 []client.CallOption
	}
	listPlansReturns struct {
		result1 *go_micro_srv_provider.ListPlansResponse
		result2 error
	}
	listPlansReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.ListPlansResponse
		result2 error
	}
	ListSubscriptionsStub        func(context.Context, *go_micro_srv_provider.ListSubscriptionsRequest, ...client.CallOption) (*go_micro_srv_provider.ListSubscriptionsResponse, error)
	listSubscriptionsMutex       sync.RWMutex
	listSubscriptionsArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.ListSubscriptionsRequest
		arg3 []client.CallOption
	}
	listSubscriptionsReturns struct {
		result1 *go_micro_srv_provider.ListSubscriptionsResponse
		result2 error
	}
	listSubscriptionsReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.ListSubscriptionsResponse
		result2 error
	}
	SetDefaultPaymentMethodStub        func(context.Context, *go_micro_srv_provider.SetDefaultPaymentMethodRequest, ...client.CallOption) (*go_micro_srv_provider.SetDefaultPaymentMethodResponse, error)
	setDefaultPaymentMethodMutex       sync.RWMutex
	setDefaultPaymentMethodArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.SetDefaultPaymentMethodRequest
		arg3 []client.CallOption
	}
	setDefaultPaymentMethodReturns struct {
		result1 *go_micro_srv_provider.SetDefaultPaymentMethodResponse
		result2 error
	}
	setDefaultPaymentMethodReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.SetDefaultPaymentMethodResponse
		result2 error
	}
	UpdateSubscriptionStub        func(context.Context, *go_micro_srv_provider.UpdateSubscriptionRequest, ...client.CallOption) (*go_micro_srv_provider.UpdateSubscriptionResponse, error)
	updateSubscriptionMutex       sync.RWMutex
	updateSubscriptionArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.UpdateSubscriptionRequest
		arg3 []client.CallOption
	}
	updateSubscriptionReturns struct {
		result1 *go_micro_srv_provider.UpdateSubscriptionResponse
		result2 error
	}
	updateSubscriptionReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.UpdateSubscriptionResponse
		result2 error
	}
	VerifyPaymentMethodStub        func(context.Context, *go_micro_srv_provider.VerifyPaymentMethodRequest, ...client.CallOption) (*go_micro_srv_provider.VerifyPaymentMethodResponse, error)
	verifyPaymentMethodMutex       sync.RWMutex
	verifyPaymentMethodArgsForCall []struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.VerifyPaymentMethodRequest
		arg3 []client.CallOption
	}
	verifyPaymentMethodReturns struct {
		result1 *go_micro_srv_provider.VerifyPaymentMethodResponse
		result2 error
	}
	verifyPaymentMethodReturnsOnCall map[int]struct {
		result1 *go_micro_srv_provider.VerifyPaymentMethodResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProviderService) CancelSubscription(arg1 context.Context, arg2 *go_micro_srv_provider.CancelSubscriptionRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.CancelSubscriptionResponse, error) {
	fake.cancelSubscriptionMutex.Lock()
	ret, specificReturn := fake.cancelSubscriptionReturnsOnCall[len(fake.cancelSubscriptionArgsForCall)]
	fake.cancelSubscriptionArgsForCall = append(fake.cancelSubscriptionArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CancelSubscriptionRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CancelSubscriptionStub
	fakeReturns := fake.cancelSubscriptionReturns
	fake.recordInvocation("CancelSubscription", []interface{}{arg1, arg2, arg3})
	fake.cancelSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) CancelSubscriptionCallCount() int {
	fake.cancelSubscriptionMutex.RLock()
	defer fake.cancelSubscriptionMutex.RUnlock()
	return len(fake.cancelSubscriptionArgsForCall)
}

func (fake *FakeProviderService) CancelSubscriptionCalls(stub func(context.Context, *go_micro_srv_provider.CancelSubscriptionRequest, ...client.CallOption) (*go_micro_srv_provider.CancelSubscriptionResponse, error)) {
	fake.cancelSubscriptionMutex.Lock()
	defer fake.cancelSubscriptionMutex.Unlock()
	fake.CancelSubscriptionStub = stub
}

func (fake *FakeProviderService) CancelSubscriptionArgsForCall(i int) (context.Context, *go_micro_srv_provider.CancelSubscriptionRequest, []client.CallOption) {
	fake.cancelSubscriptionMutex.RLock()
	defer fake.cancelSubscriptionMutex.RUnlock()
	argsForCall := fake.cancelSubscriptionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) CancelSubscriptionReturns(result1 *go_micro_srv_provider.CancelSubscriptionResponse, result2 error) {
	fake.cancelSubscriptionMutex.Lock()
	defer fake.cancelSubscriptionMutex.Unlock()
	fake.CancelSubscriptionStub = nil
	fake.cancelSubscriptionReturns = struct {
		result1 *go_micro_srv_provider.CancelSubscriptionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CancelSubscriptionReturnsOnCall(i int, result1 *go_micro_srv_provider.CancelSubscriptionResponse, result2 error) {
	fake.cancelSubscriptionMutex.Lock()
	defer fake.cancelSubscriptionMutex.Unlock()
	fake.CancelSubscriptionStub = nil
	if fake.cancelSubscriptionReturnsOnCall == nil {
		fake.cancelSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.CancelSubscriptionResponse
			result2 error
		})
	}
	fake.cancelSubscriptionReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.CancelSubscriptionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CreateCustomer(arg1 context.Context, arg2 *go_micro_srv_provider.CreateCustomerRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.CreateCustomerResponse, error) {
	fake.createCustomerMutex.Lock()
	ret, specificReturn := fake.createCustomerReturnsOnCall[len(fake.createCustomerArgsForCall)]
	fake.createCustomerArgsForCall = append(fake.createCustomerArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CreateCustomerRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreateCustomerStub
	fakeReturns := fake.createCustomerReturns
	fake.recordInvocation("CreateCustomer", []interface{}{arg1, arg2, arg3})
	fake.createCustomerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) CreateCustomerCallCount() int {
	fake.createCustomerMutex.RLock()
	defer fake.createCustomerMutex.RUnlock()
	return len(fake.createCustomerArgsForCall)
}

func (fake *FakeProviderService) CreateCustomerCalls(stub func(context.Context, *go_micro_srv_provider.CreateCustomerRequest, ...client.CallOption) (*go_micro_srv_provider.CreateCustomerResponse, error)) {
	fake.createCustomerMutex.Lock()
	defer fake.createCustomerMutex.Unlock()
	fake.CreateCustomerStub = stub
}

func (fake *FakeProviderService) CreateCustomerArgsForCall(i int) (context.Context, *go_micro_srv_provider.CreateCustomerRequest, []client.CallOption) {
	fake.createCustomerMutex.RLock()
	defer fake.createCustomerMutex.RUnlock()
	argsForCall := fake.createCustomerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) CreateCustomerReturns(result1 *go_micro_srv_provider.CreateCustomerResponse, result2 error) {
	fake.createCustomerMutex.Lock()
	defer fake.createCustomerMutex.Unlock()
	fake.CreateCustomerStub = nil
	fake.createCustomerReturns = struct {
		result1 *go_micro_srv_provider.CreateCustomerResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CreateCustomerReturnsOnCall(i int, result1 *go_micro_srv_provider.CreateCustomerResponse, result2 error) {
	fake.createCustomerMutex.Lock()
	defer fake.createCustomerMutex.Unlock()
	fake.CreateCustomerStub = nil
	if fake.createCustomerReturnsOnCall == nil {
		fake.createCustomerReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.CreateCustomerResponse
			result2 error
		})
	}
	fake.createCustomerReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.CreateCustomerResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CreatePaymentMethod(arg1 context.Context, arg2 *go_micro_srv_provider.CreatePaymentMethodRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.CreatePaymentMethodResponse, error) {
	fake.createPaymentMethodMutex.Lock()
	ret, specificReturn := fake.createPaymentMethodReturnsOnCall[len(fake.createPaymentMethodArgsForCall)]
	fake.createPaymentMethodArgsForCall = append(fake.createPaymentMethodArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CreatePaymentMethodRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreatePaymentMethodStub
	fakeReturns := fake.createPaymentMethodReturns
	fake.recordInvocation("CreatePaymentMethod", []interface{}{arg1, arg2, arg3})
	fake.createPaymentMethodMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) CreatePaymentMethodCallCount() int {
	fake.createPaymentMethodMutex.RLock()
	defer fake.createPaymentMethodMutex.RUnlock()
	return len(fake.createPaymentMethodArgsForCall)
}

func (fake *FakeProviderService) CreatePaymentMethodCalls(stub func(context.Context, *go_micro_srv_provider.CreatePaymentMethodRequest, ...client.CallOption) (*go_micro_srv_provider.CreatePaymentMethodResponse, error)) {
	fake.createPaymentMethodMutex.Lock()
	defer fake.createPaymentMethodMutex.Unlock()
	fake.CreatePaymentMethodStub = stub
}

func (fake *FakeProviderService) CreatePaymentMethodArgsForCall(i int) (context.Context, *go_micro_srv_provider.CreatePaymentMethodRequest, []client.CallOption) {
	fake.createPaymentMethodMutex.RLock()
	defer fake.createPaymentMethodMutex.RUnlock()
	argsForCall := fake.createPaymentMethodArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) CreatePaymentMethodReturns(result1 *go_micro_srv_provider.CreatePaymentMethodResponse, result2 error) {
	fake.createPaymentMethodMutex.Lock()
	defer fake.createPaymentMethodMutex.Unlock()
	fake.CreatePaymentMethodStub = nil
	fake.createPaymentMethodReturns = struct {
		result1 *go_micro_srv_provider.CreatePaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CreatePaymentMethodReturnsOnCall(i int, result1 *go_micro_srv_provider.CreatePaymentMethodResponse, result2 error) {
	fake.createPaymentMethodMutex.Lock()
	defer fake.createPaymentMethodMutex.Unlock()
	fake.CreatePaymentMethodStub = nil
	if fake.createPaymentMethodReturnsOnCall == nil {
		fake.createPaymentMethodReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.CreatePaymentMethodResponse
			result2 error
		})
	}
	fake.createPaymentMethodReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.CreatePaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CreatePlan(arg1 context.Context, arg2 *go_micro_srv_provider.CreatePlanRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.CreatePlanResponse, error) {
	fake.createPlanMutex.Lock()
	ret, specificReturn := fake.createPlanReturnsOnCall[len(fake.createPlanArgsForCall)]
	fake.createPlanArgsForCall = append(fake.createPlanArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CreatePlanRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreatePlanStub
	fakeReturns := fake.createPlanReturns
	fake.recordInvocation("CreatePlan", []interface{}{arg1, arg2, arg3})
	fake.createPlanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) CreatePlanCallCount() int {
	fake.createPlanMutex.RLock()
	defer fake.createPlanMutex.RUnlock()
	return len(fake.createPlanArgsForCall)
}

func (fake *FakeProviderService) CreatePlanCalls(stub func(context.Context, *go_micro_srv_provider.CreatePlanRequest, ...client.CallOption) (*go_micro_srv_provider.CreatePlanResponse, error)) {
	fake.createPlanMutex.Lock()
	defer fake.createPlanMutex.Unlock()
	fake.CreatePlanStub = stub
}

func (fake *FakeProviderService) CreatePlanArgsForCall(i int) (context.Context, *go_micro_srv_provider.CreatePlanRequest, []client.CallOption) {
	fake.createPlanMutex.RLock()
	defer fake.createPlanMutex.RUnlock()
	argsForCall := fake.createPlanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) CreatePlanReturns(result1 *go_micro_srv_provider.CreatePlanResponse, result2 error) {
	fake.createPlanMutex.Lock()
	defer fake.createPlanMutex.Unlock()
	fake.CreatePlanStub = nil
	fake.createPlanReturns = struct {
		result1 *go_micro_srv_provider.CreatePlanResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CreatePlanReturnsOnCall(i int, result1 *go_micro_srv_provider.CreatePlanResponse, result2 error) {
	fake.createPlanMutex.Lock()
	defer fake.createPlanMutex.Unlock()
	fake.CreatePlanStub = nil
	if fake.createPlanReturnsOnCall == nil {
		fake.createPlanReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.CreatePlanResponse
			result2 error
		})
	}
	fake.createPlanReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.CreatePlanResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CreateProduct(arg1 context.Context, arg2 *go_micro_srv_provider.CreateProductRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.CreateProductResponse, error) {
	fake.createProductMutex.Lock()
	ret, specificReturn := fake.createProductReturnsOnCall[len(fake.createProductArgsForCall)]
	fake.createProductArgsForCall = append(fake.createProductArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CreateProductRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreateProductStub
	fakeReturns := fake.createProductReturns
	fake.recordInvocation("CreateProduct", []interface{}{arg1, arg2, arg3})
	fake.createProductMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) CreateProductCallCount() int {
	fake.createProductMutex.RLock()
	defer fake.createProductMutex.RUnlock()
	return len(fake.createProductArgsForCall)
}

func (fake *FakeProviderService) CreateProductCalls(stub func(context.Context, *go_micro_srv_provider.CreateProductRequest, ...client.CallOption) (*go_micro_srv_provider.CreateProductResponse, error)) {
	fake.createProductMutex.Lock()
	defer fake.createProductMutex.Unlock()
	fake.CreateProductStub = stub
}

func (fake *FakeProviderService) CreateProductArgsForCall(i int) (context.Context, *go_micro_srv_provider.CreateProductRequest, []client.CallOption) {
	fake.createProductMutex.RLock()
	defer fake.createProductMutex.RUnlock()
	argsForCall := fake.createProductArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) CreateProductReturns(result1 *go_micro_srv_provider.CreateProductResponse, result2 error) {
	fake.createProductMutex.Lock()
	defer fake.createProductMutex.Unlock()
	fake.CreateProductStub = nil
	fake.createProductReturns = struct {
		result1 *go_micro_srv_provider.CreateProductResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CreateProductReturnsOnCall(i int, result1 *go_micro_srv_provider.CreateProductResponse, result2 error) {
	fake.createProductMutex.Lock()
	defer fake.createProductMutex.Unlock()
	fake.CreateProductStub = nil
	if fake.createProductReturnsOnCall == nil {
		fake.createProductReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.CreateProductResponse
			result2 error
		})
	}
	fake.createProductReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.CreateProductResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CreateSubscription(arg1 context.Context, arg2 *go_micro_srv_provider.CreateSubscriptionRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.CreateSubscriptionResponse, error) {
	fake.createSubscriptionMutex.Lock()
	ret, specificReturn := fake.createSubscriptionReturnsOnCall[len(fake.createSubscriptionArgsForCall)]
	fake.createSubscriptionArgsForCall = append(fake.createSubscriptionArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.CreateSubscriptionRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreateSubscriptionStub
	fakeReturns := fake.createSubscriptionReturns
	fake.recordInvocation("CreateSubscription", []interface{}{arg1, arg2, arg3})
	fake.createSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) CreateSubscriptionCallCount() int {
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	return len(fake.createSubscriptionArgsForCall)
}

func (fake *FakeProviderService) CreateSubscriptionCalls(stub func(context.Context, *go_micro_srv_provider.CreateSubscriptionRequest, ...client.CallOption) (*go_micro_srv_provider.CreateSubscriptionResponse, error)) {
	fake.createSubscriptionMutex.Lock()
	defer fake.createSubscriptionMutex.Unlock()
	fake.CreateSubscriptionStub = stub
}

func (fake *FakeProviderService) CreateSubscriptionArgsForCall(i int) (context.Context, *go_micro_srv_provider.CreateSubscriptionRequest, []client.CallOption) {
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	argsForCall := fake.createSubscriptionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) CreateSubscriptionReturns(result1 *go_micro_srv_provider.CreateSubscriptionResponse, result2 error) {
	fake.createSubscriptionMutex.Lock()
	defer fake.createSubscriptionMutex.Unlock()
	fake.CreateSubscriptionStub = nil
	fake.createSubscriptionReturns = struct {
		result1 *go_micro_srv_provider.CreateSubscriptionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) CreateSubscriptionReturnsOnCall(i int, result1 *go_micro_srv_provider.CreateSubscriptionResponse, result2 error) {
	fake.createSubscriptionMutex.Lock()
	defer fake.createSubscriptionMutex.Unlock()
	fake.CreateSubscriptionStub = nil
	if fake.createSubscriptionReturnsOnCall == nil {
		fake.createSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.CreateSubscriptionResponse
			result2 error
		})
	}
	fake.createSubscriptionReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.CreateSubscriptionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) DeleteCustomer(arg1 context.Context, arg2 *go_micro_srv_provider.DeleteCustomerRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.DeleteCustomerResponse, error) {
	fake.deleteCustomerMutex.Lock()
	ret, specificReturn := fake.deleteCustomerReturnsOnCall[len(fake.deleteCustomerArgsForCall)]
	fake.deleteCustomerArgsForCall = append(fake.deleteCustomerArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.DeleteCustomerRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.DeleteCustomerStub
	fakeReturns := fake.deleteCustomerReturns
	fake.recordInvocation("DeleteCustomer", []interface{}{arg1, arg2, arg3})
	fake.deleteCustomerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) DeleteCustomerCallCount() int {
	fake.deleteCustomerMutex.RLock()
	defer fake.deleteCustomerMutex.RUnlock()
	return len(fake.deleteCustomerArgsForCall)
}

func (fake *FakeProviderService) DeleteCustomerCalls(stub func(context.Context, *go_micro_srv_provider.DeleteCustomerRequest, ...client.CallOption) (*go_micro_srv_provider.DeleteCustomerResponse, error)) {
	fake.deleteCustomerMutex.Lock()
	defer fake.deleteCustomerMutex.Unlock()
	fake.DeleteCustomerStub = stub
}

func (fake *FakeProviderService) DeleteCustomerArgsForCall(i int) (context.Context, *go_micro_srv_provider.DeleteCustomerRequest, []client.CallOption) {
	fake.deleteCustomerMutex.RLock()
	defer fake.deleteCustomerMutex.RUnlock()
	argsForCall := fake.deleteCustomerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) DeleteCustomerReturns(result1 *go_micro_srv_provider.DeleteCustomerResponse, result2 error) {
	fake.deleteCustomerMutex.Lock()
	defer fake.deleteCustomerMutex.Unlock()
	fake.DeleteCustomerStub = nil
	fake.deleteCustomerReturns = struct {
		result1 *go_micro_srv_provider.DeleteCustomerResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) DeleteCustomerReturnsOnCall(i int, result1 *go_micro_srv_provider.DeleteCustomerResponse, result2 error) {
	fake.deleteCustomerMutex.Lock()
	defer fake.deleteCustomerMutex.Unlock()
	fake.DeleteCustomerStub = nil
	if fake.deleteCustomerReturnsOnCall == nil {
		fake.deleteCustomerReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.DeleteCustomerResponse
			result2 error
		})
	}
	fake.deleteCustomerReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.DeleteCustomerResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) DeletePaymentMethod(arg1 context.Context, arg2 *go_micro_srv_provider.DeletePaymentMethodRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.DeletePaymentMethodResponse, error) {
	fake.deletePaymentMethodMutex.Lock()
	ret, specificReturn := fake.deletePaymentMethodReturnsOnCall[len(fake.deletePaymentMethodArgsForCall)]
	fake.deletePaymentMethodArgsForCall = append(fake.deletePaymentMethodArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.DeletePaymentMethodRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.DeletePaymentMethodStub
	fakeReturns := fake.deletePaymentMethodReturns
	fake.recordInvocation("DeletePaymentMethod", []interface{}{arg1, arg2, arg3})
	fake.deletePaymentMethodMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) DeletePaymentMethodCallCount() int {
	fake.deletePaymentMethodMutex.RLock()
	defer fake.deletePaymentMethodMutex.RUnlock()
	return len(fake.deletePaymentMethodArgsForCall)
}

func (fake *FakeProviderService) DeletePaymentMethodCalls(stub func(context.Context, *go_micro_srv_provider.DeletePaymentMethodRequest, ...client.CallOption) (*go_micro_srv_provider.DeletePaymentMethodResponse, error)) {
	fake.deletePaymentMethodMutex.Lock()
	defer fake.deletePaymentMethodMutex.Unlock()
	fake.DeletePaymentMethodStub = stub
}

func (fake *FakeProviderService) DeletePaymentMethodArgsForCall(i int) (context.Context, *go_micro_srv_provider.DeletePaymentMethodRequest, []client.CallOption) {
	fake.deletePaymentMethodMutex.RLock()
	defer fake.deletePaymentMethodMutex.RUnlock()
	argsForCall := fake.deletePaymentMethodArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) DeletePaymentMethodReturns(result1 *go_micro_srv_provider.DeletePaymentMethodResponse, result2 error) {
	fake.deletePaymentMethodMutex.Lock()
	defer fake.deletePaymentMethodMutex.Unlock()
	fake.DeletePaymentMethodStub = nil
	fake.deletePaymentMethodReturns = struct {
		result1 *go_micro_srv_provider.DeletePaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) DeletePaymentMethodReturnsOnCall(i int, result1 *go_micro_srv_provider.DeletePaymentMethodResponse, result2 error) {
	fake.deletePaymentMethodMutex.Lock()
	defer fake.deletePaymentMethodMutex.Unlock()
	fake.DeletePaymentMethodStub = nil
	if fake.deletePaymentMethodReturnsOnCall == nil {
		fake.deletePaymentMethodReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.DeletePaymentMethodResponse
			result2 error
		})
	}
	fake.deletePaymentMethodReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.DeletePaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) GetProviderID(arg1 context.Context, arg2 *go_micro_srv_provider.GetProviderIDRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.GetProviderIDResponse, error) {
	fake.getProviderIDMutex.Lock()
	ret, specificReturn := fake.getProviderIDReturnsOnCall[len(fake.getProviderIDArgsForCall)]
	fake.getProviderIDArgsForCall = append(fake.getProviderIDArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.GetProviderIDRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetProviderIDStub
	fakeReturns := fake.getProviderIDReturns
	fake.recordInvocation("GetProviderID", []interface{}{arg1, arg2, arg3})
	fake.getProviderIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) GetProviderIDCallCount() int {
	fake.getProviderIDMutex.RLock()
	defer fake.getProviderIDMutex.RUnlock()
	return len(fake.getProviderIDArgsForCall)
}

func (fake *FakeProviderService) GetProviderIDCalls(stub func(context.Context, *go_micro_srv_provider.GetProviderIDRequest, ...client.CallOption) (*go_micro_srv_provider.GetProviderIDResponse, error)) {
	fake.getProviderIDMutex.Lock()
	defer fake.getProviderIDMutex.Unlock()
	fake.GetProviderIDStub = stub
}

func (fake *FakeProviderService) GetProviderIDArgsForCall(i int) (context.Context, *go_micro_srv_provider.GetProviderIDRequest, []client.CallOption) {
	fake.getProviderIDMutex.RLock()
	defer fake.getProviderIDMutex.RUnlock()
	argsForCall := fake.getProviderIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) GetProviderIDReturns(result1 *go_micro_srv_provider.GetProviderIDResponse, result2 error) {
	fake.getProviderIDMutex.Lock()
	defer fake.getProviderIDMutex.Unlock()
	fake.GetProviderIDStub = nil
	fake.getProviderIDReturns = struct {
		result1 *go_micro_srv_provider.GetProviderIDResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) GetProviderIDReturnsOnCall(i int, result1 *go_micro_srv_provider.GetProviderIDResponse, result2 error) {
	fake.getProviderIDMutex.Lock()
	defer fake.getProviderIDMutex.Unlock()
	fake.GetProviderIDStub = nil
	if fake.getProviderIDReturnsOnCall == nil {
		fake.getProviderIDReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.GetProviderIDResponse
			result2 error
		})
	}
	fake.getProviderIDReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.GetProviderIDResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) ListPaymentMethods(arg1 context.Context, arg2 *go_micro_srv_provider.ListPaymentMethodsRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.ListPaymentMethodsResponse, error) {
	fake.listPaymentMethodsMutex.Lock()
	ret, specificReturn := fake.listPaymentMethodsReturnsOnCall[len(fake.listPaymentMethodsArgsForCall)]
	fake.listPaymentMethodsArgsForCall = append(fake.listPaymentMethodsArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.ListPaymentMethodsRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListPaymentMethodsStub
	fakeReturns := fake.listPaymentMethodsReturns
	fake.recordInvocation("ListPaymentMethods", []interface{}{arg1, arg2, arg3})
	fake.listPaymentMethodsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) ListPaymentMethodsCallCount() int {
	fake.listPaymentMethodsMutex.RLock()
	defer fake.listPaymentMethodsMutex.RUnlock()
	return len(fake.listPaymentMethodsArgsForCall)
}

func (fake *FakeProviderService) ListPaymentMethodsCalls(stub func(context.Context, *go_micro_srv_provider.ListPaymentMethodsRequest, ...client.CallOption) (*go_micro_srv_provider.ListPaymentMethodsResponse, error)) {
	fake.listPaymentMethodsMutex.Lock()
	defer fake.listPaymentMethodsMutex.Unlock()
	fake.ListPaymentMethodsStub = stub
}

func (fake *FakeProviderService) ListPaymentMethodsArgsForCall(i int) (context.Context, *go_micro_srv_provider.ListPaymentMethodsRequest, []client.CallOption) {
	fake.listPaymentMethodsMutex.RLock()
	defer fake.listPaymentMethodsMutex.RUnlock()
	argsForCall := fake.listPaymentMethodsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) ListPaymentMethodsReturns(result1 *go_micro_srv_provider.ListPaymentMethodsResponse, result2 error) {
	fake.listPaymentMethodsMutex.Lock()
	defer fake.listPaymentMethodsMutex.Unlock()
	fake.ListPaymentMethodsStub = nil
	fake.listPaymentMethodsReturns = struct {
		result1 *go_micro_srv_provider.ListPaymentMethodsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) ListPaymentMethodsReturnsOnCall(i int, result1 *go_micro_srv_provider.ListPaymentMethodsResponse, result2 error) {
	fake.listPaymentMethodsMutex.Lock()
	defer fake.listPaymentMethodsMutex.Unlock()
	fake.ListPaymentMethodsStub = nil
	if fake.listPaymentMethodsReturnsOnCall == nil {
		fake.listPaymentMethodsReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.ListPaymentMethodsResponse
			result2 error
		})
	}
	fake.listPaymentMethodsReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.ListPaymentMethodsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) ListPlans(arg1 context.Context, arg2 *go_micro_srv_provider.ListPlansRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.ListPlansResponse, error) {
	fake.listPlansMutex.Lock()
	ret, specificReturn := fake.listPlansReturnsOnCall[len(fake.listPlansArgsForCall)]
	fake.listPlansArgsForCall = append(fake.listPlansArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.ListPlansRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListPlansStub
	fakeReturns := fake.listPlansReturns
	fake.recordInvocation("ListPlans", []interface{}{arg1, arg2, arg3})
	fake.listPlansMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) ListPlansCallCount() int {
	fake.listPlansMutex.RLock()
	defer fake.listPlansMutex.RUnlock()
	return len(fake.listPlansArgsForCall)
}

func (fake *FakeProviderService) ListPlansCalls(stub func(context.Context, *go_micro_srv_provider.ListPlansRequest, ...client.CallOption) (*go_micro_srv_provider.ListPlansResponse, error)) {
	fake.listPlansMutex.Lock()
	defer fake.listPlansMutex.Unlock()
	fake.ListPlansStub = stub
}

func (fake *FakeProviderService) ListPlansArgsForCall(i int) (context.Context, *go_micro_srv_provider.ListPlansRequest, []client.CallOption) {
	fake.listPlansMutex.RLock()
	defer fake.listPlansMutex.RUnlock()
	argsForCall := fake.listPlansArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) ListPlansReturns(result1 *go_micro_srv_provider.ListPlansResponse, result2 error) {
	fake.listPlansMutex.Lock()
	defer fake.listPlansMutex.Unlock()
	fake.ListPlansStub = nil
	fake.listPlansReturns = struct {
		result1 *go_micro_srv_provider.ListPlansResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) ListPlansReturnsOnCall(i int, result1 *go_micro_srv_provider.ListPlansResponse, result2 error) {
	fake.listPlansMutex.Lock()
	defer fake.listPlansMutex.Unlock()
	fake.ListPlansStub = nil
	if fake.listPlansReturnsOnCall == nil {
		fake.listPlansReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.ListPlansResponse
			result2 error
		})
	}
	fake.listPlansReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.ListPlansResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) ListSubscriptions(arg1 context.Context, arg2 *go_micro_srv_provider.ListSubscriptionsRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.ListSubscriptionsResponse, error) {
	fake.listSubscriptionsMutex.Lock()
	ret, specificReturn := fake.listSubscriptionsReturnsOnCall[len(fake.listSubscriptionsArgsForCall)]
	fake.listSubscriptionsArgsForCall = append(fake.listSubscriptionsArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.ListSubscriptionsRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListSubscriptionsStub
	fakeReturns := fake.listSubscriptionsReturns
	fake.recordInvocation("ListSubscriptions", []interface{}{arg1, arg2, arg3})
	fake.listSubscriptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) ListSubscriptionsCallCount() int {
	fake.listSubscriptionsMutex.RLock()
	defer fake.listSubscriptionsMutex.RUnlock()
	return len(fake.listSubscriptionsArgsForCall)
}

func (fake *FakeProviderService) ListSubscriptionsCalls(stub func(context.Context, *go_micro_srv_provider.ListSubscriptionsRequest, ...client.CallOption) (*go_micro_srv_provider.ListSubscriptionsResponse, error)) {
	fake.listSubscriptionsMutex.Lock()
	defer fake.listSubscriptionsMutex.Unlock()
	fake.ListSubscriptionsStub = stub
}

func (fake *FakeProviderService) ListSubscriptionsArgsForCall(i int) (context.Context, *go_micro_srv_provider.ListSubscriptionsRequest, []client.CallOption) {
	fake.listSubscriptionsMutex.RLock()
	defer fake.listSubscriptionsMutex.RUnlock()
	argsForCall := fake.listSubscriptionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) ListSubscriptionsReturns(result1 *go_micro_srv_provider.ListSubscriptionsResponse, result2 error) {
	fake.listSubscriptionsMutex.Lock()
	defer fake.listSubscriptionsMutex.Unlock()
	fake.ListSubscriptionsStub = nil
	fake.listSubscriptionsReturns = struct {
		result1 *go_micro_srv_provider.ListSubscriptionsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) ListSubscriptionsReturnsOnCall(i int, result1 *go_micro_srv_provider.ListSubscriptionsResponse, result2 error) {
	fake.listSubscriptionsMutex.Lock()
	defer fake.listSubscriptionsMutex.Unlock()
	fake.ListSubscriptionsStub = nil
	if fake.listSubscriptionsReturnsOnCall == nil {
		fake.listSubscriptionsReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.ListSubscriptionsResponse
			result2 error
		})
	}
	fake.listSubscriptionsReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.ListSubscriptionsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) SetDefaultPaymentMethod(arg1 context.Context, arg2 *go_micro_srv_provider.SetDefaultPaymentMethodRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.SetDefaultPaymentMethodResponse, error) {
	fake.setDefaultPaymentMethodMutex.Lock()
	ret, specificReturn := fake.setDefaultPaymentMethodReturnsOnCall[len(fake.setDefaultPaymentMethodArgsForCall)]
	fake.setDefaultPaymentMethodArgsForCall = append(fake.setDefaultPaymentMethodArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.SetDefaultPaymentMethodRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.SetDefaultPaymentMethodStub
	fakeReturns := fake.setDefaultPaymentMethodReturns
	fake.recordInvocation("SetDefaultPaymentMethod", []interface{}{arg1, arg2, arg3})
	fake.setDefaultPaymentMethodMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) SetDefaultPaymentMethodCallCount() int {
	fake.setDefaultPaymentMethodMutex.RLock()
	defer fake.setDefaultPaymentMethodMutex.RUnlock()
	return len(fake.setDefaultPaymentMethodArgsForCall)
}

func (fake *FakeProviderService) SetDefaultPaymentMethodCalls(stub func(context.Context, *go_micro_srv_provider.SetDefaultPaymentMethodRequest, ...client.CallOption) (*go_micro_srv_provider.SetDefaultPaymentMethodResponse, error)) {
	fake.setDefaultPaymentMethodMutex.Lock()
	defer fake.setDefaultPaymentMethodMutex.Unlock()
	fake.SetDefaultPaymentMethodStub = stub
}

func (fake *FakeProviderService) SetDefaultPaymentMethodArgsForCall(i int) (context.Context, *go_micro_srv_provider.SetDefaultPaymentMethodRequest, []client.CallOption) {
	fake.setDefaultPaymentMethodMutex.RLock()
	defer fake.setDefaultPaymentMethodMutex.RUnlock()
	argsForCall := fake.setDefaultPaymentMethodArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) SetDefaultPaymentMethodReturns(result1 *go_micro_srv_provider.SetDefaultPaymentMethodResponse, result2 error) {
	fake.setDefaultPaymentMethodMutex.Lock()
	defer fake.setDefaultPaymentMethodMutex.Unlock()
	fake.SetDefaultPaymentMethodStub = nil
	fake.setDefaultPaymentMethodReturns = struct {
		result1 *go_micro_srv_provider.SetDefaultPaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) SetDefaultPaymentMethodReturnsOnCall(i int, result1 *go_micro_srv_provider.SetDefaultPaymentMethodResponse, result2 error) {
	fake.setDefaultPaymentMethodMutex.Lock()
	defer fake.setDefaultPaymentMethodMutex.Unlock()
	fake.SetDefaultPaymentMethodStub = nil
	if fake.setDefaultPaymentMethodReturnsOnCall == nil {
		fake.setDefaultPaymentMethodReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.SetDefaultPaymentMethodResponse
			result2 error
		})
	}
	fake.setDefaultPaymentMethodReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.SetDefaultPaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) UpdateSubscription(arg1 context.Context, arg2 *go_micro_srv_provider.UpdateSubscriptionRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.UpdateSubscriptionResponse, error) {
	fake.updateSubscriptionMutex.Lock()
	ret, specificReturn := fake.updateSubscriptionReturnsOnCall[len(fake.updateSubscriptionArgsForCall)]
	fake.updateSubscriptionArgsForCall = append(fake.updateSubscriptionArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.UpdateSubscriptionRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateSubscriptionStub
	fakeReturns := fake.updateSubscriptionReturns
	fake.recordInvocation("UpdateSubscription", []interface{}{arg1, arg2, arg3})
	fake.updateSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) UpdateSubscriptionCallCount() int {
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	return len(fake.updateSubscriptionArgsForCall)
}

func (fake *FakeProviderService) UpdateSubscriptionCalls(stub func(context.Context, *go_micro_srv_provider.UpdateSubscriptionRequest, ...client.CallOption) (*go_micro_srv_provider.UpdateSubscriptionResponse, error)) {
	fake.updateSubscriptionMutex.Lock()
	defer fake.updateSubscriptionMutex.Unlock()
	fake.UpdateSubscriptionStub = stub
}

func (fake *FakeProviderService) UpdateSubscriptionArgsForCall(i int) (context.Context, *go_micro_srv_provider.UpdateSubscriptionRequest, []client.CallOption) {
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	argsForCall := fake.updateSubscriptionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) UpdateSubscriptionReturns(result1 *go_micro_srv_provider.UpdateSubscriptionResponse, result2 error) {
	fake.updateSubscriptionMutex.Lock()
	defer fake.updateSubscriptionMutex.Unlock()
	fake.UpdateSubscriptionStub = nil
	fake.updateSubscriptionReturns = struct {
		result1 *go_micro_srv_provider.UpdateSubscriptionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) UpdateSubscriptionReturnsOnCall(i int, result1 *go_micro_srv_provider.UpdateSubscriptionResponse, result2 error) {
	fake.updateSubscriptionMutex.Lock()
	defer fake.updateSubscriptionMutex.Unlock()
	fake.UpdateSubscriptionStub = nil
	if fake.updateSubscriptionReturnsOnCall == nil {
		fake.updateSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.UpdateSubscriptionResponse
			result2 error
		})
	}
	fake.updateSubscriptionReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.UpdateSubscriptionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) VerifyPaymentMethod(arg1 context.Context, arg2 *go_micro_srv_provider.VerifyPaymentMethodRequest, arg3 ...client.CallOption) (*go_micro_srv_provider.VerifyPaymentMethodResponse, error) {
	fake.verifyPaymentMethodMutex.Lock()
	ret, specificReturn := fake.verifyPaymentMethodReturnsOnCall[len(fake.verifyPaymentMethodArgsForCall)]
	fake.verifyPaymentMethodArgsForCall = append(fake.verifyPaymentMethodArgsForCall, struct {
		arg1 context.Context
		arg2 *go_micro_srv_provider.VerifyPaymentMethodRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.VerifyPaymentMethodStub
	fakeReturns := fake.verifyPaymentMethodReturns
	fake.recordInvocation("VerifyPaymentMethod", []interface{}{arg1, arg2, arg3})
	fake.verifyPaymentMethodMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderService) VerifyPaymentMethodCallCount() int {
	fake.verifyPaymentMethodMutex.RLock()
	defer fake.verifyPaymentMethodMutex.RUnlock()
	return len(fake.verifyPaymentMethodArgsForCall)
}

func (fake *FakeProviderService) VerifyPaymentMethodCalls(stub func(context.Context, *go_micro_srv_provider.VerifyPaymentMethodRequest, ...client.CallOption) (*go_micro_srv_provider.VerifyPaymentMethodResponse, error)) {
	fake.verifyPaymentMethodMutex.Lock()
	defer fake.verifyPaymentMethodMutex.Unlock()
	fake.VerifyPaymentMethodStub = stub
}

func (fake *FakeProviderService) VerifyPaymentMethodArgsForCall(i int) (context.Context, *go_micro_srv_provider.VerifyPaymentMethodRequest, []client.CallOption) {
	fake.verifyPaymentMethodMutex.RLock()
	defer fake.verifyPaymentMethodMutex.RUnlock()
	argsForCall := fake.verifyPaymentMethodArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProviderService) VerifyPaymentMethodReturns(result1 *go_micro_srv_provider.VerifyPaymentMethodResponse, result2 error) {
	fake.verifyPaymentMethodMutex.Lock()
	defer fake.verifyPaymentMethodMutex.Unlock()
	fake.VerifyPaymentMethodStub = nil
	fake.verifyPaymentMethodReturns = struct {
		result1 *go_micro_srv_provider.VerifyPaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) VerifyPaymentMethodReturnsOnCall(i int, result1 *go_micro_srv_provider.VerifyPaymentMethodResponse, result2 error) {
	fake.verifyPaymentMethodMutex.Lock()
	defer fake.verifyPaymentMethodMutex.Unlock()
	fake.VerifyPaymentMethodStub = nil
	if fake.verifyPaymentMethodReturnsOnCall == nil {
		fake.verifyPaymentMethodReturnsOnCall = make(map[int]struct {
			result1 *go_micro_srv_provider.VerifyPaymentMethodResponse
			result2 error
		})
	}
	fake.verifyPaymentMethodReturnsOnCall[i] = struct {
		result1 *go_micro_srv_provider.VerifyPaymentMethodResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cancelSubscriptionMutex.RLock()
	defer fake.cancelSubscriptionMutex.RUnlock()
	fake.createCustomerMutex.RLock()
	defer fake.createCustomerMutex.RUnlock()
	fake.createPaymentMethodMutex.RLock()
	defer fake.createPaymentMethodMutex.RUnlock()
	fake.createPlanMutex.RLock()
	defer fake.createPlanMutex.RUnlock()
	fake.createProductMutex.RLock()
	defer fake.createProductMutex.RUnlock()
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	fake.deleteCustomerMutex.RLock()
	defer fake.deleteCustomerMutex.RUnlock()
	fake.deletePaymentMethodMutex.RLock()
	defer fake.deletePaymentMethodMutex.RUnlock()
	fake.getProviderIDMutex.RLock()
	defer fake.getProviderIDMutex.RUnlock()
	fake.listPaymentMethodsMutex.RLock()
	defer fake.listPaymentMethodsMutex.RUnlock()
	fake.listPlansMutex.RLock()
	defer fake.listPlansMutex.RUnlock()
	fake.listSubscriptionsMutex.RLock()
	defer fake.listSubscriptionsMutex.RUnlock()
	fake.setDefaultPaymentMethodMutex.RLock()
	defer fake.setDefaultPaymentMethodMutex.RUnlock()
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	fake.verifyPaymentMethodMutex.RLock()
	defer fake.verifyPaymentMethodMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProviderService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ go_micro_srv_provider.ProviderService = new(FakeProviderService)
