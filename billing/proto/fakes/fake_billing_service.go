// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	billing "github.com/trmnl-core/services/billing/proto"
	"github.com/micro/micro/v3/service/client"
)

type FakeBillingService struct {
	ApplyStub        func(context.Context, *billing.ApplyRequest, ...client.CallOption) (*billing.ApplyResponse, error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 context.Context
		arg2 *billing.ApplyRequest
		arg3 []client.CallOption
	}
	applyReturns struct {
		result1 *billing.ApplyResponse
		result2 error
	}
	applyReturnsOnCall map[int]struct {
		result1 *billing.ApplyResponse
		result2 error
	}
	PortalStub        func(context.Context, *billing.PortalRequest, ...client.CallOption) (*billing.PortalResponse, error)
	portalMutex       sync.RWMutex
	portalArgsForCall []struct {
		arg1 context.Context
		arg2 *billing.PortalRequest
		arg3 []client.CallOption
	}
	portalReturns struct {
		result1 *billing.PortalResponse
		result2 error
	}
	portalReturnsOnCall map[int]struct {
		result1 *billing.PortalResponse
		result2 error
	}
	UpdatesStub        func(context.Context, *billing.UpdatesRequest, ...client.CallOption) (*billing.UpdatesResponse, error)
	updatesMutex       sync.RWMutex
	updatesArgsForCall []struct {
		arg1 context.Context
		arg2 *billing.UpdatesRequest
		arg3 []client.CallOption
	}
	updatesReturns struct {
		result1 *billing.UpdatesResponse
		result2 error
	}
	updatesReturnsOnCall map[int]struct {
		result1 *billing.UpdatesResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBillingService) Apply(arg1 context.Context, arg2 *billing.ApplyRequest, arg3 ...client.CallOption) (*billing.ApplyResponse, error) {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 context.Context
		arg2 *billing.ApplyRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1, arg2, arg3})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBillingService) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeBillingService) ApplyCalls(stub func(context.Context, *billing.ApplyRequest, ...client.CallOption) (*billing.ApplyResponse, error)) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *FakeBillingService) ApplyArgsForCall(i int) (context.Context, *billing.ApplyRequest, []client.CallOption) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBillingService) ApplyReturns(result1 *billing.ApplyResponse, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 *billing.ApplyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBillingService) ApplyReturnsOnCall(i int, result1 *billing.ApplyResponse, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 *billing.ApplyResponse
			result2 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 *billing.ApplyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBillingService) Portal(arg1 context.Context, arg2 *billing.PortalRequest, arg3 ...client.CallOption) (*billing.PortalResponse, error) {
	fake.portalMutex.Lock()
	ret, specificReturn := fake.portalReturnsOnCall[len(fake.portalArgsForCall)]
	fake.portalArgsForCall = append(fake.portalArgsForCall, struct {
		arg1 context.Context
		arg2 *billing.PortalRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.PortalStub
	fakeReturns := fake.portalReturns
	fake.recordInvocation("Portal", []interface{}{arg1, arg2, arg3})
	fake.portalMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBillingService) PortalCallCount() int {
	fake.portalMutex.RLock()
	defer fake.portalMutex.RUnlock()
	return len(fake.portalArgsForCall)
}

func (fake *FakeBillingService) PortalCalls(stub func(context.Context, *billing.PortalRequest, ...client.CallOption) (*billing.PortalResponse, error)) {
	fake.portalMutex.Lock()
	defer fake.portalMutex.Unlock()
	fake.PortalStub = stub
}

func (fake *FakeBillingService) PortalArgsForCall(i int) (context.Context, *billing.PortalRequest, []client.CallOption) {
	fake.portalMutex.RLock()
	defer fake.portalMutex.RUnlock()
	argsForCall := fake.portalArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBillingService) PortalReturns(result1 *billing.PortalResponse, result2 error) {
	fake.portalMutex.Lock()
	defer fake.portalMutex.Unlock()
	fake.PortalStub = nil
	fake.portalReturns = struct {
		result1 *billing.PortalResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBillingService) PortalReturnsOnCall(i int, result1 *billing.PortalResponse, result2 error) {
	fake.portalMutex.Lock()
	defer fake.portalMutex.Unlock()
	fake.PortalStub = nil
	if fake.portalReturnsOnCall == nil {
		fake.portalReturnsOnCall = make(map[int]struct {
			result1 *billing.PortalResponse
			result2 error
		})
	}
	fake.portalReturnsOnCall[i] = struct {
		result1 *billing.PortalResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBillingService) Updates(arg1 context.Context, arg2 *billing.UpdatesRequest, arg3 ...client.CallOption) (*billing.UpdatesResponse, error) {
	fake.updatesMutex.Lock()
	ret, specificReturn := fake.updatesReturnsOnCall[len(fake.updatesArgsForCall)]
	fake.updatesArgsForCall = append(fake.updatesArgsForCall, struct {
		arg1 context.Context
		arg2 *billing.UpdatesRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdatesStub
	fakeReturns := fake.updatesReturns
	fake.recordInvocation("Updates", []interface{}{arg1, arg2, arg3})
	fake.updatesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBillingService) UpdatesCallCount() int {
	fake.updatesMutex.RLock()
	defer fake.updatesMutex.RUnlock()
	return len(fake.updatesArgsForCall)
}

func (fake *FakeBillingService) UpdatesCalls(stub func(context.Context, *billing.UpdatesRequest, ...client.CallOption) (*billing.UpdatesResponse, error)) {
	fake.updatesMutex.Lock()
	defer fake.updatesMutex.Unlock()
	fake.UpdatesStub = stub
}

func (fake *FakeBillingService) UpdatesArgsForCall(i int) (context.Context, *billing.UpdatesRequest, []client.CallOption) {
	fake.updatesMutex.RLock()
	defer fake.updatesMutex.RUnlock()
	argsForCall := fake.updatesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBillingService) UpdatesReturns(result1 *billing.UpdatesResponse, result2 error) {
	fake.updatesMutex.Lock()
	defer fake.updatesMutex.Unlock()
	fake.UpdatesStub = nil
	fake.updatesReturns = struct {
		result1 *billing.UpdatesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBillingService) UpdatesReturnsOnCall(i int, result1 *billing.UpdatesResponse, result2 error) {
	fake.updatesMutex.Lock()
	defer fake.updatesMutex.Unlock()
	fake.UpdatesStub = nil
	if fake.updatesReturnsOnCall == nil {
		fake.updatesReturnsOnCall = make(map[int]struct {
			result1 *billing.UpdatesResponse
			result2 error
		})
	}
	fake.updatesReturnsOnCall[i] = struct {
		result1 *billing.UpdatesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBillingService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.portalMutex.RLock()
	defer fake.portalMutex.RUnlock()
	fake.updatesMutex.RLock()
	defer fake.updatesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBillingService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ billing.BillingService = new(FakeBillingService)
