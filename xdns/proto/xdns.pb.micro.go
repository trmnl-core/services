// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/xdns.proto

package xdns

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Xdns service

func NewXdnsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Xdns service

type XdnsService interface {
	EnumerateDNS(ctx context.Context, in *EnumerateDNSRequest, opts ...client.CallOption) (*EnumerateDNSResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (*StatusResponse, error)
}

type xdnsService struct {
	c    client.Client
	name string
}

func NewXdnsService(name string, c client.Client) XdnsService {
	return &xdnsService{
		c:    c,
		name: name,
	}
}

func (c *xdnsService) EnumerateDNS(ctx context.Context, in *EnumerateDNSRequest, opts ...client.CallOption) (*EnumerateDNSResponse, error) {
	req := c.c.NewRequest(c.name, "Xdns.EnumerateDNS", in)
	out := new(EnumerateDNSResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xdnsService) Status(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.name, "Xdns.Status", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Xdns service

type XdnsHandler interface {
	EnumerateDNS(context.Context, *EnumerateDNSRequest, *EnumerateDNSResponse) error
	Status(context.Context, *StatusRequest, *StatusResponse) error
}

func RegisterXdnsHandler(s server.Server, hdlr XdnsHandler, opts ...server.HandlerOption) error {
	type xdns interface {
		EnumerateDNS(ctx context.Context, in *EnumerateDNSRequest, out *EnumerateDNSResponse) error
		Status(ctx context.Context, in *StatusRequest, out *StatusResponse) error
	}
	type Xdns struct {
		xdns
	}
	h := &xdnsHandler{hdlr}
	return s.Handle(s.NewHandler(&Xdns{h}, opts...))
}

type xdnsHandler struct {
	XdnsHandler
}

func (h *xdnsHandler) EnumerateDNS(ctx context.Context, in *EnumerateDNSRequest, out *EnumerateDNSResponse) error {
	return h.XdnsHandler.EnumerateDNS(ctx, in, out)
}

func (h *xdnsHandler) Status(ctx context.Context, in *StatusRequest, out *StatusResponse) error {
	return h.XdnsHandler.Status(ctx, in, out)
}
